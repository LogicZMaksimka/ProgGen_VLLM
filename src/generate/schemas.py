"""
Store long strings that serves as part of GPT completion prompt
"""

from stefutil import *


__all__ = [
    # 'job_desc_schema',
    # 'conll2003_no_misc_defn', 'conll2003_no_misc_defn2', 'conll2003_no_misc_defn3',
    # 'conll2003_no_misc_schema', 'conll2003_no_misc_schema2', 'conll2003_no_misc_schema3', 'conll2003_no_misc_schema4',
    # 'conll2003_no_misc_schema5'
    'Dataset2Schema'
]


job_desc_schema = """- **Skills**
    - Examples: 'computer programming', 'French', 'data analysis', 'Microsoft Word', 'leadership', 'unloading cargo', 'problem solving', 'honesty', 'graduate recruitment strategy' 
    - They are tasks that can be performed, or the attributes and abilities that enable people to perform tasks 
    - Includes descriptions of tasks (e.g. 'unloading cargo') 
    - Includes both domain-specific 'hard skills' and domain-general 'soft skills' 
    - Includes specific knowledge (e.g. 'understanding of marketing strategies') 
    - May be validated with a qualification or experience
- **Qualifications**
    - Examples: 'Bachelor's Degree', 'chartership', 'National Pool Lifeguard Qualification', 'three A-levels' 
    - They are official certifications obtained through taking a course or passing an exam or an appraisal 
    - Includes driving licenses and security clearance
- **Experience**
    - Examples: '2 years experience', 'minimum of 5 years experience' 
    - They are quantified by length of time 
    - Does not include what the experience is of or in - for example, in the sentence 'this job requires at least 10 years of experience as a CEO', only the words 'at least 10 years of experience' are the Experience
- **Occupations**
    - Examples: 'Teaching Assistant', 'CEO', 'Data Analyst', 'Chef de partie' 
    - These are job titles 
    - Includes abbreviations - for example, both 'Chief Executive Officer' and 'CEO' are Occupations
- **Domains**
    - Examples: 'aerospace', 'oil industry', 'education', 'human resources' 
    - These are areas of industry in which someone might have knowledge or experience
"""

conll2003_no_misc_defn = """1. **Person (`person`)**:
    - **Definition**: Refers to the name of an individual. It can be the full name, first name, surname, or even a nickname as long as it clearly indicates a specific individual.
    - **Examples**: [Peter Blackburn, Werner Zwingmann, Nikolaus van der Pas, Fischler, Hendrix]

2. **Location (`location`)**:
    - **Definition**: Refers to the name of a geographical place. It can be a city, a country, a specific address, a landmark, or any other identifiable location.
    - **Examples**: [BRUSSELS, Germany, Britain, France]

3. **Organization (`organization`)**:
    - **Definition**: Refers to the name of any corporate or collective entity. It could be the name of companies, agencies, institutions, associations, government bodies, or other groups.
    - **Examples**: [EU, European Commission, European Union, Commission]"""


conll2003_no_misc_defn2 = """Person: This category encompasses names of individuals. Entities annotated as a person can include full names, last names when they appear alone, or even titles if they unambiguously refer to specific individuals. In a dataset, it's crucial that only references to actual people (not characters or roles) are annotated as such.
Location: This includes the names of geographical entities such as cities, countries, regions, bodies of water, mountains, and other identifiable areas of land or water. Annotations for locations are typically clear when the text refers to a place that can be located on a map.
Organization: This category includes entities that are groups or collections of people. These can be companies, governmental entities, non-profits, sports teams, or any other kind of organization. It may also include ad hoc groups, like a government coalition, that are recognized by name."""


# Generated by GPT4 zero-shot
conll2003_no_misc_schema = """### 1. Person

**Definition:** Refers to names of individual people. This includes full names, first names, last names, or even nicknames if they specifically refer to an individual. 

**Examples:** 

- "Peter Blackburn" is a person name.
- "Nikolaus van der Pas" is a person name.
- "Hendrix" can be considered a person name if it's clear in the context that it refers to a specific individual (e.g., Jimi Hendrix).

**Non-examples:**

- Names of organizations, even if they have personal names in them (e.g., "Johnson & Johnson" would not be labeled as a person).

### 2. Location

**Definition:** Refers to names of geographical places. This includes countries, cities, towns, villages, continents, regions, and other geographical landmarks. It does not include addresses or buildings unless the building's name is synonymous with a location (e.g., "The Pentagon").

**Examples:** 

- "BRUSSELS" refers to a city, thus a location.
- "Germany" and "Britain" are names of countries, thus locations.

**Non-examples:**

- Names of organizations or events, even if they sound like locations (e.g., "European Union" is not a location).

### 3. Organization

**Definition:** Refers to names of formal groups, institutions, companies, unions, and other collective entities. This can be governmental, non-governmental, profit, non-profit, or any other form of organized group.

**Examples:** 

- "EU" or "European Union" refers to a collective body of countries, thus an organization.
- "European Commission" is a branch of the EU, thus an organization.

**Non-examples:**

- Names of individual people (e.g., "Peter Blackburn" is not an organization).
- Names of locations (e.g., "France" is not an organization)."""

# Generated by GPT4 1-shot
conll2003_no_misc_schema2 = """- **Person**
    - **Examples**: 'Peter Blackburn', 'Nikolaus van der Pas', 'Hendrix', 'Fischler'
    - Persons are individual human beings, whether living or fictional.
    - This category captures both full names (e.g., 'Peter Blackburn') and surnames (e.g., 'Fischler') when the surname is used to refer to a known individual.
    - Includes titles if they are an inseparable part of the person's recognition, e.g., 'Sir Ian McKellen'.
    - Does not include generic roles or professions unless they are used as a title for a specific person (e.g., 'The Doctor' when referring to the character from Doctor Who).

- **Location**
    - **Examples**: 'BRUSSELS', 'Germany', 'Britain', 'France'
    - Locations can be countries, cities, towns, villages, and other named geographical places.
    - They can also be more generic places like 'the beach' or 'downtown' when they refer to a specific known location in context.
    - Landmarks, named buildings, or areas can also be tagged as locations.
    - It does not include addresses, but if a specific building or landmark is mentioned, it will be tagged.

- **Organization**
    - **Examples**: 'EU', 'European Commission', 'European Union', 'Commission'
    - Organizations include named corporate, governmental, non-governmental, and other institutional entities.
    - It can also include groups, teams, committees, or any other collective of individuals with a formal or widely recognized structure.
    - The name of an organization might be its full name, abbreviation, or any other form that refers to the organization unambiguously in the given context.
    - When a division or department of an organization is mentioned, it will also be tagged under this category."""

# Generated by GPT4 zero-shot + more detailed instruction
conll2003_no_misc_schema3 = """### 1. **Person**

    - **Definition**: Refers to a named individual or group of individuals.
    - **Examples**: 'Peter Blackburn', 'Werner Zwingmann', 'Nikolaus van der Pas', 'Hendrix', 'Fischler'.
    - **Characteristics**:
        - Typically refers to individual human beings, but can also refer to pseudonyms or pen names.
        - Might have titles attached to them, like 'Dr.', 'Mr.', 'Mrs.', but the core identifier is the name.
        - Could be first names, last names, or both.
        - Can occasionally refer to fictional or mythological characters if mentioned in the context.
    - **Exclusions**: 
        - Names of companies, organizations, or places.
        - Generic terms that refer to a group but aren't specific names (e.g., 'people', 'consumers').

### 2. **Location**

    - **Definition**: Represents a geographic area or place, whether it be a country, city, town, village, or even specific landmarks.
    - **Examples**: 'BRUSSELS', 'Germany', 'Britain', 'France'.
    - **Characteristics**:
        - Can range from continents to neighborhoods or landmarks.
        - Could include political entities, states, provinces, and regions.
        - Names of planets, galaxies, or celestial bodies also fall into this category if mentioned.
    - **Exclusions**:
        - Non-specific terms that indicate direction or position but aren't places themselves (e.g., 'abroad', 'overseas').
        - Locations that are only referred to by a descriptor without their proper name (e.g., 'the city', 'that country').

### 3. **Organization**

    - **Definition**: Refers to a collection of people who come together to achieve a common purpose or goal. This includes companies, institutions, committees, or any formal and informal groups.
    - **Examples**: 'EU', 'European Commission', 'European Union', 'Commission'.
    - **Characteristics**:
        - Can be for-profit companies, non-profit organizations, governmental bodies, committees, or unions.
        - Might have acronyms or abbreviations that are commonly recognized (e.g., 'EU' for 'European Union').
        - Can be multinational, national, or local.
        - Organizations can be public or private, big or small.
    - **Exclusions**:
        - Non-specific, generic references to groups of people without a formal organizational context (e.g., 'crowd', 'team' without specifying which team)."""


# after 5-shot demo change
conll2003_no_misc_schema4 = """#### 1. Class: Person

**Definition:** This class represents names of individual people. 

**Features:** 
- May contain first name, middle name, last name, or any combination of these.
- Can include titles, initials, or suffixes when they are part of the person's commonly recognized name.
- May have non-standard characters or apostrophes, e.g., "O'Meara".
  
**Examples:** 
- "Julius Nyrere" 
- "Nsanze Terence"
- "Mark O'Meara"

---

#### 2. Class: Location

**Definition:** This class represents names of geographical places or areas. 

**Features:** 
- Can be countries, cities, regions, or any specific geographical location.
- May refer to commonly recognized regions or amalgamations of cities.
- Does not include organizations or establishments located in a place (e.g., "U.N. Security Council" is an organization, not a location).
  
**Examples:** 
- "Saudi Arabia"
- "Burundi"
- "Amsterdam-Rotterdam-Antwerp"

---

#### 3. Class: Organization

**Definition:** This class represents names of companies, teams, institutions, government bodies, or any other organized group.

**Features:** 
- Can be official names or commonly recognized abbreviations.
- Can be names of sports teams, government bodies, companies, or other organized entities.
- May sometimes look like standard words but should be annotated if they refer to a specific organization in context.
  
**Examples:** 
- "Mouscron" (when referring to a sports team)
- "DODGERS"
- "U.N. Security Council"
- "Interacciones"
- "Gloucestershire" (when referring to a sports team)"""


conll2003_no_misc_schema5 = """#### Person:
A `Person` entity refers to any individual's name or a group of individuals commonly referred to by a single name. This includes full names, last names when used alone, and any titles that are typically used in direct conjunction with a person's name. It does not include occupational titles used in isolation.

Examples of `Person` entities:
- Full name: John Smith
- Last name (if famous or contextually clear): Obama
- Titled name: President Lincoln
- Common name for a group: The Beatles

#### Location:
A `Location` entity is any geographical place name, ranging from small scale (like a street name) to large scale (such as continents). This includes bodies of water, mountains, cities, countries, and even celestial bodies if mentioned in a geographical context. It does not include locations that are part of an organization's name unless the location is being referred to in a geographical sense.

Examples of `Location` entities:
- Countries: France
- Cities: Tokyo
- Natural formations: Mount Everest
- Streets: Fifth Avenue
- Celestial: Mars (when referred to as a planet)

#### Organization:
An `Organization` entity is any named corporate, governmental, or other institutional body. It includes companies, government entities, sports teams, non-profits, and other organized groups. Names of organizations are often followed by legal identifiers like Inc., Ltd., or Corp., but those are not necessary for a name to be classified as an organization.

Examples of `Organization` entities:
- Companies: Google Inc.
- Government bodies: United Nations
- Sports teams: Los Angeles Lakers
- Non-profits: Red Cross
- Bands: Coldplay"""


# after 1-shot demo update; from GPT4, generated once
conll2003_no_misc_defn3 = """1. **Person:** Refers to individual human beings. The annotation should identify names of people, which may include first names, last names, or full names. Titles or honorifics attached to a person's name (like "Dr.", "Mr.", "Mrs.", etc.) can also be included in this category if they appear with the name.

2. **Location:** This category encompasses geographical entities. It can include names of countries, cities, regions, specific addresses, buildings, rivers, mountains, and other identifiable physical locations. It does not include generic places without specific names (like "a mountain" without a proper name)

3. **Organization:** This class is for entities that represent groups, institutions, companies, agencies, teams, and other organized bodies. Organizations can range from small local entities (like a local restaurant) to large international corporations or government agencies. Sports teams, political parties, non-profits, and academic institutions also fall under this category."""


mit_movie_defn = """1. **Title**: Refers to the name of a movie. This entity should capture the complete title as used in the movie industry.

2. **Year**: This entity represents the year a movie was released. It should be a four-digit number indicating the release year.

3. **Genre**: This refers to the category or type of movie, such as action, comedy, drama, etc. The genre might be explicitly mentioned in the query or implied.

4. **Director**: This entity is the name of the person who directed the movie. The name can be first name, last name, or full name.

5. **MPAA Rating**: The Motion Picture Association of America (MPAA) rating of the movie. This includes ratings like G, PG, PG-13, R, and NC-17.

6. **Plot**: Keywords or phrases that describe the plot or a significant element of the story in the movie.

7. **Actor**: This entity is the name of an actor or actress appearing in the movie. Names can be first, last, or full.

8. **Trailer**: Refers to a part or segment of the movie typically used in promotional material. It can be a specific scene or a general reference to the trailer.

9. **Song**: This entity captures the title of a song featured in a movie.

10. **Review**: Keywords or phrases that indicate an opinion or review about the movie.

11. **Character**: This entity refers to a character's name in a movie.

12. **Viewers' Rating**: This includes phrases or terms that indicate how viewers have rated or perceived the movie. It can be formal ratings or informal descriptors."""


dataset2schema = {
    'conll2003': dict(defn=conll2003_no_misc_defn3, schema=conll2003_no_misc_schema5),
    'mit-movie': dict(defn=mit_movie_defn, schema=None),
    'job-stack': dict(defn=None, schema=job_desc_schema)
}


class Dataset2Schema:
    def __init__(self, dataset_name: str = 'conll2003', schema_type: str = 'defn'):
        self.dataset_name = dataset_name

        ca.assert_options(display_name='Dataset Entity Schema Kind', val=schema_type, options=['defn', 'schema'])
        self.schema_type = schema_type

        if dataset_name not in dataset2schema:
            raise NotImplementedError(f'No schema for dataset {dataset_name}')
        self.d = dataset2schema[dataset_name]

    def __call__(self):
        ret = self.d[self.schema_type]
        if ret is None:
            raise NotImplementedError
        return ret
